name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  DOCKER_DRIVER: overlay
  SPRING_PROFILES_ACTIVE: gitlab-ci
  MAVEN_OPTS: >-
    -Dhttps.protocols=TLSv1.2
    -Dmaven.repo.local=${{ github.workspace }}/.m2/repository
    -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN
    -Dorg.slf4j.simpleLogger.showDateTime=true
    -Djava.awt.headless=true
  MAVEN_CLI_OPTS: >-
    --batch-mode
    --errors
    --fail-at-end
    --show-version
    -DinstallAtEnd=true
    -DdeployAtEnd=true

jobs:
  test:
    runs-on: ubuntu-latest
    container:
      image: maven:3.8.6-eclipse-temurin-11-alpine
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: .m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}

      - name: Test with Maven
        run: mvn package $MAVEN_CLI_OPTS -B -V -e -fae -Pprod -DskipTests

  build:
    runs-on: ubuntu-latest
    container:
      image: maven:3.8.6-eclipse-temurin-11-alpine
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: .m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}

      - name: Build with Maven
        env: 
          FIREBASE_AUTH: ${{ secrets.FIREBASE_AUTH }}
        run: |
          mvn package $MAVEN_CLI_OPTS -B -V -e -fae -Pprod -DskipTests
          echo $FIREBASE_AUTH > firebase-auth.json

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            target/*.jar
            firebase-auth.json

  docker-build:
    runs-on: ubuntu-latest
    needs: build
    container:
      image: docker:latest
    env: 
      IMAGE_NAME: ghcr.io/iseplife/api
    steps:

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts

      - name: Log in to GitHub Container Registry
        env:
          DOCKER_LOGIN: ${{ secrets.DOCKER_LOGIN }}
          DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
        run: echo $DOCKER_TOKEN | docker login ghcr.io -u $DOCKER_LOGIN --password-stdin

      - name: Extract API Version
        id: api_version
        run: | 
          apk add maven
          echo "API_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_OUTPUT
      
      - name: Build Docker Image
        run: |
          docker build -t $IMAGE_NAME:${{ steps.api_version.outputs.API_VERSION }} -t $IMAGE_NAME:latest .

      - name: Push Docker Image
        if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'master'
        run: |
          docker push $IMAGE_NAME:${{ steps.api_version.outputs.version }}
          docker push $IMAGE_NAME:latest

  push-notification:
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
      - name: Deploy notification
        if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'master'
        env:
          DEPLOY_WEBHOOK_URL: ${{ secrets.DEPLOY_WEBHOOK_URL }}
        run: |
          curl -X GET $DEPLOY_WEBHOOK_URL -H 'Content-type: application/json' --data '{"text":"Deployment completed successfully."}'